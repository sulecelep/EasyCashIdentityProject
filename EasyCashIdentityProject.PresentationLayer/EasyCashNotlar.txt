EASY CASH IDENTITY with ASP .NET CORE 6.0

2.Ders Notları:

* 6.0 'da Startup yok o yüzden geçişler kolay oluyor.
* Tek tek paket yüklemek yerine Solution'da sağ tıklayıp nugette paket yüklüyoruz.
* Microsoft.EntityFrameworkCore 6.0.16  (6.0'ın son sürümünü indirdik)
* Microsoft.EntityFrameworkCore.Design 6.0.16  (6.0'ın son sürümünü indirdik)
* Microsoft.EntityFrameworkCore.SQLServer 6.0.16  (6.0'ın son sürümünü indirdik)
* Microsoft.EntityFrameworkCore.Tools 6.0.16  (6.0'ın son sürümünü indirdik)
* Microsoft.AspNetCore.Identity 2.2.0
* Microsoft.AspNetCore.Identity.EntityFrameworkCore 6.0.16 

3.Ders Notları:

Katmanların birbirleriyle referans işlemleri.
EntityLayer: ...
DataAccessLayer: EL
BusinessLayer: DAL + EL
PresentationLayer: EL + DAL+ BL
//DTO'yu sonra dahil edicez.

Concrete: Sınıflar için kullanılır. 
Abstract: Interfacce için.

Access Modifiers: Erişim belirleyicileri
-Public:her klasör sınıf vs 'den ulaşılabilir.
-Private: sadece kullanıldığı namespace içinde erişim sağlanabiliyor. 
-Protected: bağlı bulunduğu sınıftan ve o sınıfı kalıtsal olarak alan sınıflardan erişilebiliyor.
-Internal: sadece bulunduğu katmanda erişim sağlanabilir.

4.Ders Notları:

Migration eklerken Up veritabanında oluşacakları gösterirken, down iptal edersek nelerin silineceğini gösterir.

Asp.Net Users:
Id'nin türü Nvarchar
EmailConfirmed türü byte (email adresi onaylandı mı onaylanmadı mı kontrolü)
-Register > Maile 6 haneli kod Gönder > Kullanıcı kodu girsin > EmailConfirmed true olsun
-Login > Kullanıcı adı, şifre, email conf==true
-Stampler başka bir sosyal medya racılığıyla giriş yaparken
-TwoFactorEnabled (iki adımda doğrulama)
-LockoutEnd hesabın kilitli kalmasının bitme süresi (default 5 dakika)
-LockOutEnabled true olursa hatalı girişi sayar
-AccessFailedCount kaç kere yanlış bilgi girildi

AspNetRoles:
Id
Name Admin, Member .. 
NormalizedName büyük harflerle yazıldığı hali
ConcurrencyStamp

5.Ders Notları:

AspNetUser Tablosunun Özelleştirilmesi

-AspNetUser'a kendimiz property eklemek için Entity katmanında AppUser sınıfını açtık.
-AppUser sınıfının Identity ile çalışması için IdentityUser classıyla inherit ettik
-IdentyUser sınıfının primary key yani Id için data tipi olarak int kullanmasını istediğimiz için;
AppUser:IdentityUser<int> olarak yazdık.
-AspNetRoles tablosu için de AppRole sınıfı açtık ve IdentityRole sınıfıyla inherit ettik.
-Nvarchar olduğu için onun da TKey parametresini int yaptık.
-Migration'da hata aldık. Context sınıfını DbContext ile inherit edip tekrar mig. yaptık böylece Identityden gelen tabloları sildik.
-Tekrar Context'e IdentityDbContext'i 2. overloadından inherit edip migration yaptığımızda hata almadık.
-Hatanın sebebi: Identity classlarının ilişkilerinin kaldırılıp migration edilmesi gerekiyordu.

6. Ders Notları:
Dto Katmanı ve AppUserRegisterDto Sınıfı

Dto(Data Transfer Object)

-Bir Entity'e ait bütün propertylerle işlem yapmak yerine, sadece kendi istediğim propertyleri
kullanabilmek adına Dto katmanına ihtiyaç var.
-Dto katmanı içerisinde Validation lar normal şartlar altında yazılabilir ama çok tercih edilmez.
-Solid prensiplerinden s harfi Single Responsibility Principle'ı ezmiş oluruz. Nedir bu prensip:
-Bir sınıf(nesne) yalnızca bir amaç için değiştirilebilir. o da o sınıfa yükleen sorumluluktur,
yani bir sınıfın(fonksiyona da indirgenebilir) yapması gereken yalnızca bir işi olması gerekir.
Eğer geliştirdiğiniz sınıf ya da fonksiyon birden fazla amaca hizmet ediyorsa, bu kurala aykırı bir 
geliştirme sürecinde olduğunuz anlamına geliyor. Bunu farkettiğinizde amaçlara uygun olarak parçalamanız gerekmektedir.
Bir sınıfı veya fonksiyonu geliştirdiğimizde sorumluluğunu ya da amacını iyi belirleyip, sınıfı ona göre tasarlamamız gerekir, 
böylece oluşabilecek herhangi bir değişimden, olabildiğince az şeyi güncelleyerek ve düzelterek istenilen geliştirmeyi gerçekleştirmiş oluruz. 
Sorumluluğun azaltılması demek değişime daha kolay adapte olmak demektir.

--Yani Dto katmanında validation yapabilirdik ama solidi ezmemek için Business katmanında Fluent
Validation klasöründe sınıf açıp orada bu işlemleri yapacağız. Validation sınıfının sadece validation
görevi olacak, Dto sınıflarının sadece property tutma amacı olacak, birden fazla amaç yüklemicez.

7. Ders Notları:
AppUserRegister Fluent Validation

BusinessLayer'a: 
-FluentValidation 11.5.2 paketini yükledik.
-FluentValidation.AspNetCore 11.3.0 paketini yükledik
-FluentValidation.DependencyInjectionExtensions 11.5.2 yi yükledik

8. Ders Notları:

-Abstract: Interface'leri tutacak
-Concrete: Context sınıfını tutucaz.
-EntityFramework: Entity'e özgü metotları tutucaz 
-Repositories: Tasarım desenidir, CRUD işlemlerini tekrardan kurtarıyor. Generic bir yapı kurcaz. İskelet yapıdır.
-Migrations: Migration detayları burada bulunur.

9. Ders Notları:

-Dependency Injection: Dependency injection uygulamasaydık öncelikle çok büyük bir performans sorunumuz olurdu. 
Singelton vb. desenleri uygulamamıza izin veriyor. 
2. olarak entity framework vb. yapılara bağımlı olacaktık. 
3. olarak mesela ui katmanında kullanmak istediğimizde iç içe 
birbirine bağımlı classları bu şekilde kullanmamız gerekirdi. 
new BusinessService<DataAccessService> şeklinde newlememiz gerekir 
çok kod tekrarına düşer ve hata yapardık. Bunun yerine bir IOC container 
ve Interface yapısı sayesinde bunu çok daha kolaylaştırıyoruz.

-Bir sınıfta diğer sınıfı newlememk gerekiyor, bağımlılıkları minimize etmeye dependecy
injection deniyor.

11. Ders Notları:

-Identity'de şifre formatı
-Şifre en az 6 karakterden oluşacak
-En az 1 küçük harf
-En az 1 büyük harf
-En az 1 sembol
-En az 1 sayı 

-EF6'da prop tanımlarken ? koymalıyız, yoksa not null gidiyor.

12. Ders Notları:
Validation hatalarının Türkçeleştirilmesi
